/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package binary.tree;

public class App {

    public static void main(String[] args) {
        System.out.println("hello world");
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(3);
        tree.root.right = new Node(3);
        tree.root.right.right = new Node(4);
        tree.root.right.left = new Node(5);
        tree.root.left.left = new Node(6);
        tree.root.left.left.left = new Node(7);
        tree.root.left.right = new Node(1);
        tree.breadth_first(tree.root);

//        System.out.println(tree.oddnum());

//tree.printInorder();
//        System.out.println();
//tree.printPostorder();
//        System.out.println();
//tree.printPreorder();
//        System.out.println(tree.FindMaximumValue());

//        BinarySearchTree bt = new BinarySearchTree();
//        bt.add(7);
//        bt.add(3);
//        bt.add(2);
//        bt.add(5);
//        bt.add(10);
//        bt.add(12);
//        bt.printPreorder();
//        bt.Contains(6);

    KaryNode a = new KaryNode("3");
    KaryNode c = new KaryNode("5");
    KaryNode b = new KaryNode("15");
    KaryNode d = new KaryNode("30");


        FizzBuzzTree r = new FizzBuzzTree(a);


        a.addChild(b);
        a.addChild(c);
        b.addChild(d);

  r.change(a);
        r.preorderTraversal(a);



    }
}
