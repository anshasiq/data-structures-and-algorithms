/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashmap;

import java.util.ArrayList;

public class App {
    public static  ArrayList<ArrayList<String>> left_join(Hashtable<String, String>  a, Hashtable<String, String>  b){
        ArrayList<ArrayList<String>> t = new ArrayList<>();
    for(String x : a.keys()){
        ArrayList<String> one = new ArrayList<>();
        one.add(x);
        one.add(a.get(x));
        if(b.has(x))
        one.add(b.get(x));
        else
        one.add(null);
//        System.out.println(one);
        t.add(one);
    }
    return t;
    }

    public  String repeated_word(String d){
        d=  d.toLowerCase();
        d=d.replace(",", "");
        d=d.replace(".", "");
        String[] words = d.split(" ");
        Hashtable<String, Integer> h = new Hashtable<>();
        for(String x : words) {
            if(h.has(x)){
                System.out.println(x);
                return x;
            }
            else
                h.set(x, 1);
        }
//        System.out.println(h);
        return " ";
    }
   public  ArrayList<Integer> finall = new ArrayList<>();


    public  void tree_intersection(Node a,Node b){
        if(a==null)
            return ;
        if(a.data==b.data){
            finall.add(a.data);
        System.out.println(a.data+ "  " + b.data);}
        tree_intersection(a.left,b.left);
        tree_intersection(a.right,b.right);

    }


    public static void main(String[] args) {
        BinaryTree a = new BinaryTree();

        a.root =new Node(150);
        a.root.right = new Node(250);
        a.root.right.left = new Node(200);
        a.root.right.right = new Node(350);
        a.root.right.right.left = new Node(300);
        a.root.right.right.right = new Node(500);
        a.root.left= new Node(100);
        a.root.left.right= new Node(160);
        a.root.left.right.left= new Node(125);
        a.root.left.right.right= new Node(175);
        a.root.left.left= new Node(75);
//        a.Preorder(a.root);




        BinaryTree B = new BinaryTree();
        B.root=new Node(42);

        B.root.right = new Node(600);
        B.root.right.left = new Node(200);
        B.root.right.right = new Node(350);
        B.root.right.right.left = new Node(4);
        B.root.right.right.right = new Node(500);
        B.root.left= new Node(100);
        B.root.left.right= new Node(160);
        B.root.left.right.left= new Node(125);
        B.root.left.right.right= new Node(175);
        B.root.left.left= new Node(15);

//        tree_intersection (a,B);



    }
}
